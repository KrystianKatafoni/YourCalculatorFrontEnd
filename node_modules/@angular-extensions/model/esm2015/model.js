/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { map, shareReplay } from 'rxjs/operators';
import * as i0 from "@angular/core";
/**
 * @template T
 */
export class Model {
    /**
     * @param {?} initialData
     * @param {?} immutable
     * @param {?} sharedSubscription
     * @param {?=} clone
     */
    constructor(initialData, immutable, sharedSubscription, clone) {
        this._data = new BehaviorSubject(initialData);
        this.data$ = this._data.asObservable().pipe(map((data) => immutable
            ? clone
                ? clone(data)
                : JSON.parse(JSON.stringify(data))
            : data), sharedSubscription ? shareReplay(1) : map((data) => data));
    }
    /**
     * @return {?}
     */
    get() {
        return this._data.getValue();
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set(data) {
        this._data.next(data);
    }
}
function Model_tsickle_Closure_declarations() {
    /** @type {?} */
    Model.prototype._data;
    /** @type {?} */
    Model.prototype.data$;
}
/**
 * @template T
 */
export class ModelFactory {
    /**
     * @param {?} initialData
     * @return {?}
     */
    create(initialData) {
        return new Model(initialData, true, false);
    }
    /**
     * @param {?} initialData
     * @return {?}
     */
    createMutable(initialData) {
        return new Model(initialData, false, false);
    }
    /**
     * @param {?} initialData
     * @return {?}
     */
    createMutableWithSharedSubscription(initialData) {
        return new Model(initialData, false, true);
    }
    /**
     * @param {?} initialData
     * @param {?} clone
     * @return {?}
     */
    createWithCustomClone(initialData, clone) {
        return new Model(initialData, true, false, clone);
    }
}
ModelFactory.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */ ModelFactory.ngInjectableDef = i0.defineInjectable({ factory: function ModelFactory_Factory() { return new ModelFactory(); }, token: ModelFactory, providedIn: "root" });
function ModelFactory_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    ModelFactory.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    ModelFactory.ctorParameters;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kZWwuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYW5ndWxhci1leHRlbnNpb25zL21vZGVsLyIsInNvdXJjZXMiOlsibW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFjLGVBQWUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNuRCxPQUFPLEVBQUUsR0FBRyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7OztBQUVsRCxNQUFNLE9BQU8sS0FBSzs7Ozs7OztJQUtoQixZQUNFLFdBQWdCLEVBQ2hCLFNBQWtCLEVBQ2xCLGtCQUEyQixFQUMzQixLQUFzQjtRQUV0QixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksZUFBZSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQzlDLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLEVBQUUsQ0FBQyxJQUFJLENBQ3pDLEdBQUcsQ0FDRCxDQUFDLElBQU8sRUFBRSxFQUFFLENBQ1YsU0FBUztZQUNQLENBQUMsQ0FBQyxLQUFLO2dCQUNMLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO2dCQUNiLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDcEMsQ0FBQyxDQUFDLElBQUksQ0FDWCxFQUNELGtCQUFrQixDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQU8sRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQzdELENBQUM7S0FDSDs7OztJQUVELEdBQUc7UUFDRCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7S0FDOUI7Ozs7O0lBRUQsR0FBRyxDQUFDLElBQU87UUFDVCxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUN2QjtDQUNGOzs7Ozs7Ozs7O0FBS0QsTUFBTSxPQUFPLFlBQVk7Ozs7O0lBQ3ZCLE1BQU0sQ0FBQyxXQUFjO1FBQ25CLE9BQU8sSUFBSSxLQUFLLENBQUksV0FBVyxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztLQUMvQzs7Ozs7SUFFRCxhQUFhLENBQUMsV0FBYztRQUMxQixPQUFPLElBQUksS0FBSyxDQUFJLFdBQVcsRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7S0FDaEQ7Ozs7O0lBRUQsbUNBQW1DLENBQUMsV0FBYztRQUNoRCxPQUFPLElBQUksS0FBSyxDQUFJLFdBQVcsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7S0FDL0M7Ozs7OztJQUVELHFCQUFxQixDQUFDLFdBQWMsRUFBRSxLQUFxQjtRQUN6RCxPQUFPLElBQUksS0FBSyxDQUFJLFdBQVcsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO0tBQ3REOzs7WUFsQkYsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgQmVoYXZpb3JTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAsIHNoYXJlUmVwbGF5IH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5leHBvcnQgY2xhc3MgTW9kZWw8VD4ge1xuICBwcml2YXRlIF9kYXRhOiBCZWhhdmlvclN1YmplY3Q8VD47XG5cbiAgZGF0YSQ6IE9ic2VydmFibGU8VD47XG5cbiAgY29uc3RydWN0b3IoXG4gICAgaW5pdGlhbERhdGE6IGFueSxcbiAgICBpbW11dGFibGU6IGJvb2xlYW4sXG4gICAgc2hhcmVkU3Vic2NyaXB0aW9uOiBib29sZWFuLFxuICAgIGNsb25lPzogKGRhdGE6IFQpID0+IFRcbiAgKSB7XG4gICAgdGhpcy5fZGF0YSA9IG5ldyBCZWhhdmlvclN1YmplY3QoaW5pdGlhbERhdGEpO1xuICAgIHRoaXMuZGF0YSQgPSB0aGlzLl9kYXRhLmFzT2JzZXJ2YWJsZSgpLnBpcGUoXG4gICAgICBtYXAoXG4gICAgICAgIChkYXRhOiBUKSA9PlxuICAgICAgICAgIGltbXV0YWJsZVxuICAgICAgICAgICAgPyBjbG9uZVxuICAgICAgICAgICAgICA/IGNsb25lKGRhdGEpXG4gICAgICAgICAgICAgIDogSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShkYXRhKSlcbiAgICAgICAgICAgIDogZGF0YVxuICAgICAgKSxcbiAgICAgIHNoYXJlZFN1YnNjcmlwdGlvbiA/IHNoYXJlUmVwbGF5KDEpIDogbWFwKChkYXRhOiBUKSA9PiBkYXRhKVxuICAgICk7XG4gIH1cblxuICBnZXQoKTogVCB7XG4gICAgcmV0dXJuIHRoaXMuX2RhdGEuZ2V0VmFsdWUoKTtcbiAgfVxuXG4gIHNldChkYXRhOiBUKSB7XG4gICAgdGhpcy5fZGF0YS5uZXh0KGRhdGEpO1xuICB9XG59XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIE1vZGVsRmFjdG9yeTxUPiB7XG4gIGNyZWF0ZShpbml0aWFsRGF0YTogVCk6IE1vZGVsPFQ+IHtcbiAgICByZXR1cm4gbmV3IE1vZGVsPFQ+KGluaXRpYWxEYXRhLCB0cnVlLCBmYWxzZSk7XG4gIH1cblxuICBjcmVhdGVNdXRhYmxlKGluaXRpYWxEYXRhOiBUKTogTW9kZWw8VD4ge1xuICAgIHJldHVybiBuZXcgTW9kZWw8VD4oaW5pdGlhbERhdGEsIGZhbHNlLCBmYWxzZSk7XG4gIH1cblxuICBjcmVhdGVNdXRhYmxlV2l0aFNoYXJlZFN1YnNjcmlwdGlvbihpbml0aWFsRGF0YTogVCk6IE1vZGVsPFQ+IHtcbiAgICByZXR1cm4gbmV3IE1vZGVsPFQ+KGluaXRpYWxEYXRhLCBmYWxzZSwgdHJ1ZSk7XG4gIH1cblxuICBjcmVhdGVXaXRoQ3VzdG9tQ2xvbmUoaW5pdGlhbERhdGE6IFQsIGNsb25lOiAoZGF0YTogVCkgPT4gVCkge1xuICAgIHJldHVybiBuZXcgTW9kZWw8VD4oaW5pdGlhbERhdGEsIHRydWUsIGZhbHNlLCBjbG9uZSk7XG4gIH1cbn1cbiJdfQ==