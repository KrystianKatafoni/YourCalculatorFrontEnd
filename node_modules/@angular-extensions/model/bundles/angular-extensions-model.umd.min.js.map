{"version":3,"sources":["ng://@angular-extensions/model/model.ts"],"names":["Model","initialData","immutable","sharedSubscription","clone","this","_data","BehaviorSubject","data$","asObservable","pipe","map","data","JSON","parse","stringify","shareReplay","prototype","get","getValue","set","next","ModelFactory","create","createMutable","createMutableWithSharedSubscription","createWithCustomClone","Injectable","args","providedIn"],"mappings":"mbAIA,IAAAA,EAAA,WAKE,SAAAA,EACEC,EACAC,EACAC,EACAC,GAEAC,KAAKC,MAAQ,IAAIC,EAAAA,gBAAgBN,GACjCI,KAAKG,MAAQH,KAAKC,MAAMG,eAAeC,KACrCC,EAAAA,IACE,SAACC,GACC,OAAAV,EACIE,EACEA,EAAMQ,GACNC,KAAKC,MAAMD,KAAKE,UAAUH,IAC5BA,IAERT,EAAqBa,EAAAA,YAAY,GAAKL,EAAAA,IAAI,SAACC,GAAY,OAAAA,YAI3DZ,EAAAiB,UAAAC,IAAA,WACE,OAAOb,KAAKC,MAAMa,YAGpBnB,EAAAiB,UAAAG,IAAA,SAAIR,GACFP,KAAKC,MAAMe,KAAKT,MA9BpB,qCAsCEU,EAAAL,UAAAM,OAAA,SAAOtB,GACL,OAAO,IAAID,EAASC,GAAa,GAAM,IAGzCqB,EAAAL,UAAAO,cAAA,SAAcvB,GACZ,OAAO,IAAID,EAASC,GAAa,GAAO,IAG1CqB,EAAAL,UAAAQ,oCAAA,SAAoCxB,GAClC,OAAO,IAAID,EAASC,GAAa,GAAO,IAG1CqB,EAAAL,UAAAS,sBAAA,SAAsBzB,EAAgBG,GACpC,OAAO,IAAIJ,EAASC,GAAa,GAAM,EAAOG,wBAjBjDuB,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { map, shareReplay } from 'rxjs/operators';\n\nexport class Model<T> {\n  private _data: BehaviorSubject<T>;\n\n  data$: Observable<T>;\n\n  constructor(\n    initialData: any,\n    immutable: boolean,\n    sharedSubscription: boolean,\n    clone?: (data: T) => T\n  ) {\n    this._data = new BehaviorSubject(initialData);\n    this.data$ = this._data.asObservable().pipe(\n      map(\n        (data: T) =>\n          immutable\n            ? clone\n              ? clone(data)\n              : JSON.parse(JSON.stringify(data))\n            : data\n      ),\n      sharedSubscription ? shareReplay(1) : map((data: T) => data)\n    );\n  }\n\n  get(): T {\n    return this._data.getValue();\n  }\n\n  set(data: T) {\n    this._data.next(data);\n  }\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ModelFactory<T> {\n  create(initialData: T): Model<T> {\n    return new Model<T>(initialData, true, false);\n  }\n\n  createMutable(initialData: T): Model<T> {\n    return new Model<T>(initialData, false, false);\n  }\n\n  createMutableWithSharedSubscription(initialData: T): Model<T> {\n    return new Model<T>(initialData, false, true);\n  }\n\n  createWithCustomClone(initialData: T, clone: (data: T) => T) {\n    return new Model<T>(initialData, true, false, clone);\n  }\n}\n"]}